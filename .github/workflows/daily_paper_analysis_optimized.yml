name: 📰 Daily Paper Analysis

on:
  schedule:
    - cron: '0 7 * * *'  # 每天 UTC 时间 23:00 运行（北京时间 07:00）
  workflow_dispatch:  # 允许手动触发

jobs:
  analyze-papers:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 增加超时时间以应对网络延迟
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # 分步骤处理缓存，增加容错性
    - name: Setup uv with retry
      id: setup-uv
      continue-on-error: true
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    # 如果缓存失败，使用无缓存模式
    - name: Setup uv without cache (fallback)
      if: steps.setup-uv.outcome == 'failure'
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: false
    
    - name: Set up Python
      run: uv python install 3.12
    
    # 尝试恢复papers缓存，失败不影响主流程
    - name: Restore papers cache
      id: cache-papers
      continue-on-error: true
      uses: actions/cache/restore@v4
      with:
        path: src/papers
        key: ${{ runner.os }}-papers-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-papers-
    
    - name: Install dependencies with retry
      run: |
        echo "开始安装依赖..."
        for i in {1..3}; do
          echo "尝试第 $i 次安装依赖..."
          if timeout 300 uv sync --frozen; then
            echo "✅ 依赖安装成功"
            break
          else
            echo "❌ 依赖安装失败，第 $i 次重试..."
            if [ $i -lt 3 ]; then
              echo "等待 15 秒后重试..."
              sleep 15
            else
              echo "❌ 依赖安装最终失败"
              exit 1
            fi
          fi
        done
    
    - name: Create necessary directories
      run: |
        mkdir -p src/papers
        mkdir -p src/templates
        mkdir -p src/logs
        echo "📁 创建必要目录完成"
    
    - name: Run paper analysis with timeout
      timeout-minutes: 45  # 为主要任务设置独立超时
      env:
        # 🤖 AI 配置 - 优先使用Qwen，其次智谱GLM，最后DeepSeek
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        QWEN_MODEL: ${{ secrets.QWEN_MODEL || 'qwen3-max' }}
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GLM_MODEL: ${{ secrets.GLM_MODEL || 'glm-4.6' }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        DEEPSEEK_MODEL: ${{ secrets.DEEPSEEK_MODEL || 'deepseek-chat' }}

        # 📧 邮件配置 - 敏感信息保留在Secrets中
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        
        # 🔧 仓库URL，由GitHub Actions提供
        GITHUB_REPO_URL: ${{ github.server_url }}/${{ github.repository }}
        
        # ⚡ 并行处理配置
        ENABLE_PARALLEL: ${{ secrets.ENABLE_PARALLEL || 'true' }}
        MAX_WORKERS: ${{ secrets.MAX_WORKERS || '0' }}  # 0表示自动计算
        BATCH_SIZE: ${{ secrets.BATCH_SIZE || '20' }}
        
        # API配置
        API_RETRY_TIMES: ${{ secrets.API_RETRY_TIMES || '3' }}
        API_DELAY: ${{ secrets.API_DELAY || '2' }}
        API_TIMEOUT: ${{ secrets.API_TIMEOUT || '60' }}
      run: |
        echo "🚀 开始论文分析..."
        timeout 2700 uv run python -m src.main
        echo "✅ 论文分析完成"
    
    # 尝试保存papers缓存，失败不影响主流程
    - name: Save papers cache
      if: always()
      continue-on-error: true
      uses: actions/cache/save@v4
      with:
        path: src/papers
        key: ${{ runner.os }}-papers-${{ hashFiles('**/uv.lock') }}
    
    - name: Upload logs as artifacts
      if: always()  # 即使失败也上传日志
      continue-on-error: true  # 上传失败不影响主流程
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ github.run_number }}
        path: src/logs/
        retention-days: 7
        if-no-files-found: warn
    
    - name: Commit and push changes
      if: success()  # 只有成功时才提交
      run: |
        echo "📝 准备提交更改..."
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # 检查是否有更改
        git add src/conclusion.md src/logs/ || true
        
        if git diff --staged --quiet; then
          echo "📄 没有更改需要提交"
        else
          echo "📚 提交论文分析结果..."
          git commit -m "📚 Update paper analysis for $(date +'%Y-%m-%d %H:%M')"
          
          # 重试推送机制
          for i in {1..3}; do
            if git push; then
              echo "✅ 推送成功"
              break
            else
              echo "❌ 推送失败，第 $i 次重试..."
              if [ $i -lt 3 ]; then
                sleep 5
                git pull --rebase
              else
                echo "❌ 推送最终失败"
                exit 1
              fi
            fi
          done
        fi
    
    - name: Performance summary
      if: always()
      run: |
        echo "📊 性能总结："
        echo "- 工作流运行时间: ${{ github.event.head_commit.timestamp }}"
        echo "- 缓存状态: ${{ steps.cache-papers.outputs.cache-hit && '命中' || '未命中' }}"
        echo "- 运行状态: ${{ job.status }}"
        
        # 显示资源使用情况
        echo "💾 磁盘使用情况:"
        df -h
        echo "🧠 内存使用情况:"
        free -h
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ 工作流执行失败"
        echo "🕐 失败时间: $(date)"
        echo "🔍 可能的原因："
        echo "  1. DeepSeek API 失败 - 检查API密钥和配额"
        echo "  2. 网络连接问题或超时"
        echo "  3. 邮件配置错误"
        echo "  4. ArXiv服务不可用"
        echo "  5. GitHub Actions缓存服务异常"
        echo ""
        echo "💡 建议解决方案："
        echo "  - 检查DeepSeek API密钥有效性和余额"
        echo "  - 登录 https://platform.deepseek.com/ 查看账户状态"
        echo "  - 手动重新运行工作流"
        echo "  - 查看详细日志了解具体错误"
        echo "  - 确认邮件SMTP配置正确"
        echo ""
